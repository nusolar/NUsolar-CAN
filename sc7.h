/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 33.2.0 Wed Apr 28 20:31:30 2021.
 */

#ifndef SC7_H
#define SC7_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SC7_AIRBAG_FRAME_ID (0x0au)
#define SC7_ABS_FRAME_ID (0xb2u)
#define SC7_CRUISE_CONTROL_STATUS_FRAME_ID (0x37fu)
#define SC7_EMISSION_FRAME_ID (0x400u)
#define SC7_STEERING_INFO_FRAME_ID (0x55bu)
#define SC7_ANTI_THEFT_FRAME_ID (0x667u)
#define SC7_GEAR_FRAME_ID (0x2c2u)
#define SC7_HEADLIGHTS_FRAME_ID (0x260u)
#define SC7_WIPER_FRAME_ID (0x270u)
#define SC7_BCC_FRAME_ID (0x385u)
#define SC7_TANK_CONTROLLER_FRAME_ID (0x5a2u)
#define SC7_PARKSENSOR_FRONT_FRAME_ID (0x765u)
#define SC7_PARKSENSOR_BACK_FRAME_ID (0x766u)
#define SC7_TEMPERATURE_FRAME_ID (0x21cu)
#define SC7_AIR_CONDITION_FRAME_ID (0x21du)
#define SC7_FRONT_LEFT_DOOR_FRAME_ID (0x3abu)
#define SC7_FRONT_RIGHT_DOOR_FRAME_ID (0x3bbu)
#define SC7_BACK_LEFT_DOOR_FRAME_ID (0x3cbu)
#define SC7_BACK_RIGHT_DOOR_FRAME_ID (0x3dbu)
#define SC7_TRUNK_LID_FRAME_ID (0x3ebu)
#define SC7_DRIVER_SEAT_FRAME_ID (0x55bu)
#define SC7_CODRIVER_SEAT_FRAME_ID (0x55cu)
#define SC7_RADIO_FRAME_ID (0x79au)
#define SC7_NAVIGATION_FRAME_ID (0x7a9u)
#define SC7_DATE_TIME_FRAME_ID (0xda7eu)

/* Frame lengths in bytes. */
#define SC7_AIRBAG_LENGTH (3u)
#define SC7_ABS_LENGTH (8u)
#define SC7_CRUISE_CONTROL_STATUS_LENGTH (3u)
#define SC7_EMISSION_LENGTH (5u)
#define SC7_STEERING_INFO_LENGTH (2u)
#define SC7_ANTI_THEFT_LENGTH (8u)
#define SC7_GEAR_LENGTH (2u)
#define SC7_HEADLIGHTS_LENGTH (1u)
#define SC7_WIPER_LENGTH (1u)
#define SC7_BCC_LENGTH (6u)
#define SC7_TANK_CONTROLLER_LENGTH (5u)
#define SC7_PARKSENSOR_FRONT_LENGTH (8u)
#define SC7_PARKSENSOR_BACK_LENGTH (8u)
#define SC7_TEMPERATURE_LENGTH (3u)
#define SC7_AIR_CONDITION_LENGTH (1u)
#define SC7_FRONT_LEFT_DOOR_LENGTH (0u)
#define SC7_FRONT_RIGHT_DOOR_LENGTH (0u)
#define SC7_BACK_LEFT_DOOR_LENGTH (0u)
#define SC7_BACK_RIGHT_DOOR_LENGTH (0u)
#define SC7_TRUNK_LID_LENGTH (0u)
#define SC7_DRIVER_SEAT_LENGTH (3u)
#define SC7_CODRIVER_SEAT_LENGTH (3u)
#define SC7_RADIO_LENGTH (5u)
#define SC7_NAVIGATION_LENGTH (2u)
#define SC7_DATE_TIME_LENGTH (7u)

/* Extended or standard frame types. */
#define SC7_AIRBAG_IS_EXTENDED (0)
#define SC7_ABS_IS_EXTENDED (0)
#define SC7_CRUISE_CONTROL_STATUS_IS_EXTENDED (0)
#define SC7_EMISSION_IS_EXTENDED (0)
#define SC7_STEERING_INFO_IS_EXTENDED (0)
#define SC7_ANTI_THEFT_IS_EXTENDED (0)
#define SC7_GEAR_IS_EXTENDED (0)
#define SC7_HEADLIGHTS_IS_EXTENDED (0)
#define SC7_WIPER_IS_EXTENDED (0)
#define SC7_BCC_IS_EXTENDED (0)
#define SC7_TANK_CONTROLLER_IS_EXTENDED (0)
#define SC7_PARKSENSOR_FRONT_IS_EXTENDED (0)
#define SC7_PARKSENSOR_BACK_IS_EXTENDED (0)
#define SC7_TEMPERATURE_IS_EXTENDED (0)
#define SC7_AIR_CONDITION_IS_EXTENDED (0)
#define SC7_FRONT_LEFT_DOOR_IS_EXTENDED (0)
#define SC7_FRONT_RIGHT_DOOR_IS_EXTENDED (0)
#define SC7_BACK_LEFT_DOOR_IS_EXTENDED (0)
#define SC7_BACK_RIGHT_DOOR_IS_EXTENDED (0)
#define SC7_TRUNK_LID_IS_EXTENDED (0)
#define SC7_DRIVER_SEAT_IS_EXTENDED (0)
#define SC7_CODRIVER_SEAT_IS_EXTENDED (0)
#define SC7_RADIO_IS_EXTENDED (0)
#define SC7_NAVIGATION_IS_EXTENDED (0)
#define SC7_DATE_TIME_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */
#define SC7_ABS_CYCLE_TIME_MS (100u)
#define SC7_BCC_CYCLE_TIME_MS (200u)
#define SC7_TANK_CONTROLLER_CYCLE_TIME_MS (200u)
#define SC7_PARKSENSOR_FRONT_CYCLE_TIME_MS (100u)
#define SC7_PARKSENSOR_BACK_CYCLE_TIME_MS (100u)

/* Signal choices. */
#define SC7_ABS_OUTSIDE_TEMP_INIT_CHOICE (0u)

#define SC7_ABS_SPEED_KM_INVALID_CHOICE (16777215u)

#define SC7_STEERING_INFO_WHEEL_ANGLE_LEFT_CHOICE (0u)
#define SC7_STEERING_INFO_WHEEL_ANGLE_STRAIGHT_CHOICE (8000u)
#define SC7_STEERING_INFO_WHEEL_ANGLE_RIGHT_CHOICE (16000u)
#define SC7_STEERING_INFO_WHEEL_ANGLE_INIT_CHOICE (16382u)
#define SC7_STEERING_INFO_WHEEL_ANGLE_SENSOR__CHOICE (16383u)

#define SC7_GEAR_ENGAGED_GEAR_DISENGAGED_CHOICE (0u)
#define SC7_GEAR_ENGAGED_GEAR_1_CHOICE (1u)
#define SC7_GEAR_ENGAGED_GEAR_2_CHOICE (2u)
#define SC7_GEAR_ENGAGED_GEAR_3_CHOICE (3u)
#define SC7_GEAR_ENGAGED_GEAR_4_CHOICE (4u)
#define SC7_GEAR_ENGAGED_GEAR_5_CHOICE (5u)
#define SC7_GEAR_ENGAGED_GEAR_6_CHOICE (6u)
#define SC7_GEAR_ENGAGED_GEAR_REVERSE_CHOICE (10u)
#define SC7_GEAR_ENGAGED_GEAR_UNSPECIFIC_ERROR_CHOICE (15u)

/**
 * Signals in message Airbag.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_airbag_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_airbag_fired;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t codriver_airbag_fired;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_seat_occupied;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t codriver_seat_occupied;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_seatbelt_locked;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t codriver_seatbelt_locked;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t airbag_configuration;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_configuration;
};

/**
 * Signals in message ABS.
 *
 * Anti lock brake system
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_abs_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t info0;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t info2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t info4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t info6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t info1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t info3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t info5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t info7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_info_mux;

    /**
     * Outside temperature.
     *
     * Range: 800..2800 (0..100 Cel)
     * Scale: 0.05
     * Offset: -40
     */
    uint16_t outside_temp;

    /**
     * Middle speed of front wheels in kilometers per hour.
     *
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint32_t speed_km;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t handbrake;
};

/**
 * Signals in message CruiseControlStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_cruise_control_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_activated;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_km;
};

/**
 * Signals in message Emission.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_emission_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mil;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t enginespeed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t nox_sensor;
};

/**
 * Signals in message SteeringInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_steering_info_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_hand_drive;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: -800
     */
    uint16_t wheel_angle;
};

/**
 * Signals in message AntiTheft.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_anti_theft_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t challenge;
};

/**
 * Signals in message Gear.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_gear_t {
    /**
     * Currently engaged gear.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t engaged_gear;
};

/**
 * Signals in message Headlights.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_headlights_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t drl;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t low;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t high;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fog;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t turnsignal_l;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t turnsignal_r;
};

/**
 * Signals in message Wiper.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_wiper_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t wiper_mode;
};

/**
 * Signals in message BCC.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_bcc_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t milage1;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t milage2;
};

/**
 * Signals in message TankController.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_tank_controller_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t tank_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t tank_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t filling_status;
};

/**
 * Signals in message ParksensorFront.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_parksensor_front_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sensor1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sensor2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sensor3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sensor4;
};

/**
 * Signals in message ParksensorBack.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_parksensor_back_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sensor5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sensor6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sensor7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sensor8;
};

/**
 * Signals in message Temperature.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_temperature_t {
    /**
     * Range: -
     * Scale: 0.05
     * Offset: -70
     */
    uint16_t inside_temp_c;

    /**
     * Range: -
     * Scale: 0.05
     * Offset: -70
     */
    uint16_t outside_temp_c;
};

/**
 * Signals in message AirCondition.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_air_condition_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_condition_on_off;
};

/**
 * Signals in message FrontLeftDoor.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_front_left_door_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message FrontRightDoor.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_front_right_door_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message BackLeftDoor.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_back_left_door_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message BackRightDoor.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_back_right_door_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message TrunkLid.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_trunk_lid_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message DriverSeat.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_driver_seat_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t headrest;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t backrest;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_pos;
};

/**
 * Signals in message CodriverSeat.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_codriver_seat_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t headrest;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t backrest;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t seat_pos;
};

/**
 * Signals in message Radio.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_radio_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t station_mux;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t station_id1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t station_id2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t station_id3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t station_id4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t station_id5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t station_id6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t station_id7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t station_id7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t signal_strength;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t is_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t traffic_info;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mute;
};

/**
 * Signals in message Navigation.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_navigation_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t is_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t announcements;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t guidance;
};

/**
 * Signals in message DateTime.
 *
 * All signal values are as on the CAN bus.
 */
struct sc7_date_time_t {
    /**
     * Range: 1..31 (1..31 d)
     * Scale: 1
     * Offset: 0
     */
    uint8_t day;

    /**
     * Range: 1..12 (1..12 mo)
     * Scale: 1
     * Offset: 0
     */
    uint8_t month;

    /**
     * Year starts with offset 2000. 2012 would be value 12.
     *
     * Range: 0..100 (0..100 a)
     * Scale: 1
     * Offset: 0
     */
    uint8_t year;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t weekday;

    /**
     * Range: 0..23 (0..23 h)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hour;

    /**
     * Range: 0..59 (0..59 min)
     * Scale: 1
     * Offset: 0
     */
    uint8_t minute;

    /**
     * Range: 0..59 (0..59 s)
     * Scale: 1
     * Offset: 0
     */
    uint8_t second;
};

/**
 * Pack message Airbag.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_airbag_pack(
    uint8_t *dst_p,
    const struct sc7_airbag_t *src_p,
    size_t size);

/**
 * Unpack message Airbag.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_airbag_unpack(
    struct sc7_airbag_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_airbag_driver_airbag_fired_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_airbag_driver_airbag_fired_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_airbag_driver_airbag_fired_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_airbag_codriver_airbag_fired_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_airbag_codriver_airbag_fired_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_airbag_codriver_airbag_fired_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_airbag_driver_seat_occupied_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_airbag_driver_seat_occupied_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_airbag_driver_seat_occupied_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_airbag_codriver_seat_occupied_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_airbag_codriver_seat_occupied_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_airbag_codriver_seat_occupied_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_airbag_driver_seatbelt_locked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_airbag_driver_seatbelt_locked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_airbag_driver_seatbelt_locked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_airbag_codriver_seatbelt_locked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_airbag_codriver_seatbelt_locked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_airbag_codriver_seatbelt_locked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_airbag_airbag_configuration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_airbag_airbag_configuration_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_airbag_airbag_configuration_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_airbag_seat_configuration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_airbag_seat_configuration_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_airbag_seat_configuration_is_in_range(uint8_t value);

/**
 * Pack message ABS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_abs_pack(
    uint8_t *dst_p,
    const struct sc7_abs_t *src_p,
    size_t size);

/**
 * Unpack message ABS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_abs_unpack(
    struct sc7_abs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_abs_info0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_info0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_info0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_abs_info2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_info2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_info2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_abs_info4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_info4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_info4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_abs_info6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_info6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_info6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_abs_info1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_info1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_info1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_abs_info3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_info3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_info3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_abs_info5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_info5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_info5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_abs_info7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_info7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_info7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_abs_abs_info_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_abs_info_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_abs_info_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_abs_outside_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_outside_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_outside_temp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t sc7_abs_speed_km_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_speed_km_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_speed_km_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_abs_handbrake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_abs_handbrake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_abs_handbrake_is_in_range(uint8_t value);

/**
 * Pack message CruiseControlStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_cruise_control_status_pack(
    uint8_t *dst_p,
    const struct sc7_cruise_control_status_t *src_p,
    size_t size);

/**
 * Unpack message CruiseControlStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_cruise_control_status_unpack(
    struct sc7_cruise_control_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_cruise_control_status_cc_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_cruise_control_status_cc_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_cruise_control_status_cc_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_cruise_control_status_cc_activated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_cruise_control_status_cc_activated_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_cruise_control_status_cc_activated_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_cruise_control_status_speed_km_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_cruise_control_status_speed_km_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_cruise_control_status_speed_km_is_in_range(uint16_t value);

/**
 * Pack message Emission.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_emission_pack(
    uint8_t *dst_p,
    const struct sc7_emission_t *src_p,
    size_t size);

/**
 * Unpack message Emission.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_emission_unpack(
    struct sc7_emission_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_emission_mil_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_emission_mil_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_emission_mil_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_emission_enginespeed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_emission_enginespeed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_emission_enginespeed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_emission_nox_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_emission_nox_sensor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_emission_nox_sensor_is_in_range(uint16_t value);

/**
 * Pack message SteeringInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_steering_info_pack(
    uint8_t *dst_p,
    const struct sc7_steering_info_t *src_p,
    size_t size);

/**
 * Unpack message SteeringInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_steering_info_unpack(
    struct sc7_steering_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_steering_info_right_hand_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_steering_info_right_hand_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_steering_info_right_hand_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_steering_info_wheel_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_steering_info_wheel_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_steering_info_wheel_angle_is_in_range(uint16_t value);

/**
 * Pack message AntiTheft.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_anti_theft_pack(
    uint8_t *dst_p,
    const struct sc7_anti_theft_t *src_p,
    size_t size);

/**
 * Unpack message AntiTheft.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_anti_theft_unpack(
    struct sc7_anti_theft_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t sc7_anti_theft_challenge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_anti_theft_challenge_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_anti_theft_challenge_is_in_range(uint64_t value);

/**
 * Pack message Gear.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_gear_pack(
    uint8_t *dst_p,
    const struct sc7_gear_t *src_p,
    size_t size);

/**
 * Unpack message Gear.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_gear_unpack(
    struct sc7_gear_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_gear_engaged_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_gear_engaged_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_gear_engaged_gear_is_in_range(uint8_t value);

/**
 * Pack message Headlights.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_headlights_pack(
    uint8_t *dst_p,
    const struct sc7_headlights_t *src_p,
    size_t size);

/**
 * Unpack message Headlights.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_headlights_unpack(
    struct sc7_headlights_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_headlights_drl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_headlights_drl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_headlights_drl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_headlights_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_headlights_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_headlights_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_headlights_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_headlights_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_headlights_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_headlights_fog_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_headlights_fog_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_headlights_fog_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_headlights_turnsignal_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_headlights_turnsignal_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_headlights_turnsignal_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_headlights_turnsignal_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_headlights_turnsignal_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_headlights_turnsignal_r_is_in_range(uint8_t value);

/**
 * Pack message Wiper.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_wiper_pack(
    uint8_t *dst_p,
    const struct sc7_wiper_t *src_p,
    size_t size);

/**
 * Unpack message Wiper.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_wiper_unpack(
    struct sc7_wiper_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_wiper_wiper_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_wiper_wiper_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_wiper_wiper_mode_is_in_range(uint8_t value);

/**
 * Pack message BCC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_bcc_pack(
    uint8_t *dst_p,
    const struct sc7_bcc_t *src_p,
    size_t size);

/**
 * Unpack message BCC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_bcc_unpack(
    struct sc7_bcc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t sc7_bcc_milage1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_bcc_milage1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_bcc_milage1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t sc7_bcc_milage2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_bcc_milage2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_bcc_milage2_is_in_range(uint32_t value);

/**
 * Pack message TankController.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_tank_controller_pack(
    uint8_t *dst_p,
    const struct sc7_tank_controller_t *src_p,
    size_t size);

/**
 * Unpack message TankController.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_tank_controller_unpack(
    struct sc7_tank_controller_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_tank_controller_tank_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_tank_controller_tank_level_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_tank_controller_tank_level_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t sc7_tank_controller_tank_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_tank_controller_tank_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_tank_controller_tank_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_tank_controller_filling_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_tank_controller_filling_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_tank_controller_filling_status_is_in_range(uint8_t value);

/**
 * Pack message ParksensorFront.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_parksensor_front_pack(
    uint8_t *dst_p,
    const struct sc7_parksensor_front_t *src_p,
    size_t size);

/**
 * Unpack message ParksensorFront.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_parksensor_front_unpack(
    struct sc7_parksensor_front_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_parksensor_front_sensor1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_parksensor_front_sensor1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_parksensor_front_sensor1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_parksensor_front_sensor2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_parksensor_front_sensor2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_parksensor_front_sensor2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_parksensor_front_sensor3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_parksensor_front_sensor3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_parksensor_front_sensor3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_parksensor_front_sensor4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_parksensor_front_sensor4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_parksensor_front_sensor4_is_in_range(uint16_t value);

/**
 * Pack message ParksensorBack.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_parksensor_back_pack(
    uint8_t *dst_p,
    const struct sc7_parksensor_back_t *src_p,
    size_t size);

/**
 * Unpack message ParksensorBack.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_parksensor_back_unpack(
    struct sc7_parksensor_back_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_parksensor_back_sensor5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_parksensor_back_sensor5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_parksensor_back_sensor5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_parksensor_back_sensor6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_parksensor_back_sensor6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_parksensor_back_sensor6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_parksensor_back_sensor7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_parksensor_back_sensor7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_parksensor_back_sensor7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_parksensor_back_sensor8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_parksensor_back_sensor8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_parksensor_back_sensor8_is_in_range(uint16_t value);

/**
 * Pack message Temperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_temperature_pack(
    uint8_t *dst_p,
    const struct sc7_temperature_t *src_p,
    size_t size);

/**
 * Unpack message Temperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_temperature_unpack(
    struct sc7_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_temperature_inside_temp_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_temperature_inside_temp_c_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_temperature_inside_temp_c_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_temperature_outside_temp_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_temperature_outside_temp_c_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_temperature_outside_temp_c_is_in_range(uint16_t value);

/**
 * Pack message AirCondition.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_air_condition_pack(
    uint8_t *dst_p,
    const struct sc7_air_condition_t *src_p,
    size_t size);

/**
 * Unpack message AirCondition.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_air_condition_unpack(
    struct sc7_air_condition_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_air_condition_air_condition_on_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_air_condition_air_condition_on_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_air_condition_air_condition_on_off_is_in_range(uint8_t value);

/**
 * Pack message FrontLeftDoor.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_front_left_door_pack(
    uint8_t *dst_p,
    const struct sc7_front_left_door_t *src_p,
    size_t size);

/**
 * Unpack message FrontLeftDoor.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_front_left_door_unpack(
    struct sc7_front_left_door_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message FrontRightDoor.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_front_right_door_pack(
    uint8_t *dst_p,
    const struct sc7_front_right_door_t *src_p,
    size_t size);

/**
 * Unpack message FrontRightDoor.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_front_right_door_unpack(
    struct sc7_front_right_door_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message BackLeftDoor.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_back_left_door_pack(
    uint8_t *dst_p,
    const struct sc7_back_left_door_t *src_p,
    size_t size);

/**
 * Unpack message BackLeftDoor.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_back_left_door_unpack(
    struct sc7_back_left_door_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message BackRightDoor.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_back_right_door_pack(
    uint8_t *dst_p,
    const struct sc7_back_right_door_t *src_p,
    size_t size);

/**
 * Unpack message BackRightDoor.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_back_right_door_unpack(
    struct sc7_back_right_door_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message TrunkLid.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_trunk_lid_pack(
    uint8_t *dst_p,
    const struct sc7_trunk_lid_t *src_p,
    size_t size);

/**
 * Unpack message TrunkLid.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_trunk_lid_unpack(
    struct sc7_trunk_lid_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message DriverSeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_driver_seat_pack(
    uint8_t *dst_p,
    const struct sc7_driver_seat_t *src_p,
    size_t size);

/**
 * Unpack message DriverSeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_driver_seat_unpack(
    struct sc7_driver_seat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_driver_seat_headrest_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_driver_seat_headrest_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_driver_seat_headrest_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_driver_seat_backrest_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_driver_seat_backrest_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_driver_seat_backrest_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_driver_seat_seat_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_driver_seat_seat_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_driver_seat_seat_pos_is_in_range(uint8_t value);

/**
 * Pack message CodriverSeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_codriver_seat_pack(
    uint8_t *dst_p,
    const struct sc7_codriver_seat_t *src_p,
    size_t size);

/**
 * Unpack message CodriverSeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_codriver_seat_unpack(
    struct sc7_codriver_seat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_codriver_seat_headrest_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_codriver_seat_headrest_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_codriver_seat_headrest_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_codriver_seat_backrest_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_codriver_seat_backrest_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_codriver_seat_backrest_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_codriver_seat_seat_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_codriver_seat_seat_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_codriver_seat_seat_pos_is_in_range(uint8_t value);

/**
 * Pack message Radio.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_radio_pack(
    uint8_t *dst_p,
    const struct sc7_radio_t *src_p,
    size_t size);

/**
 * Unpack message Radio.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_radio_unpack(
    struct sc7_radio_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_station_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_station_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_station_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_station_id1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_station_id1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_station_id1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_station_id2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_station_id2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_station_id2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_station_id3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_station_id3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_station_id3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_station_id4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_station_id4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_station_id4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_station_id5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_station_id5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_station_id5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_station_id6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_station_id6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_station_id6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_station_id7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_station_id7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_station_id7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_station_id7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_station_id7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_station_id7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sc7_radio_signal_strength_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_signal_strength_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_signal_strength_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_is_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_is_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_is_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_traffic_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_traffic_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_traffic_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_radio_mute_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_radio_mute_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_radio_mute_is_in_range(uint8_t value);

/**
 * Pack message Navigation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_navigation_pack(
    uint8_t *dst_p,
    const struct sc7_navigation_t *src_p,
    size_t size);

/**
 * Unpack message Navigation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_navigation_unpack(
    struct sc7_navigation_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_navigation_is_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_navigation_is_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_navigation_is_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_navigation_announcements_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_navigation_announcements_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_navigation_announcements_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_navigation_guidance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_navigation_guidance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_navigation_guidance_is_in_range(uint8_t value);

/**
 * Pack message DateTime.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sc7_date_time_pack(
    uint8_t *dst_p,
    const struct sc7_date_time_t *src_p,
    size_t size);

/**
 * Unpack message DateTime.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sc7_date_time_unpack(
    struct sc7_date_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_date_time_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_date_time_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_date_time_day_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_date_time_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_date_time_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_date_time_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_date_time_year_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_date_time_year_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_date_time_year_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_date_time_weekday_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_date_time_weekday_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_date_time_weekday_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_date_time_hour_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_date_time_hour_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_date_time_hour_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_date_time_minute_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_date_time_minute_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_date_time_minute_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sc7_date_time_second_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double sc7_date_time_second_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sc7_date_time_second_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
